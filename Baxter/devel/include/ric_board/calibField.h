// Generated by gencpp from file ric_board/calibField.msg
// DO NOT EDIT!


#ifndef RIC_BOARD_MESSAGE_CALIBFIELD_H
#define RIC_BOARD_MESSAGE_CALIBFIELD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ric_board
{
template <class ContainerAllocator>
struct calibField_
{
  typedef calibField_<ContainerAllocator> Type;

  calibField_()
    : max(0.0)
    , min(0.0)
    , data(0.0)  {
    }
  calibField_(const ContainerAllocator& _alloc)
    : max(0.0)
    , min(0.0)
    , data(0.0)  {
  (void)_alloc;
    }



   typedef float _max_type;
  _max_type max;

   typedef float _min_type;
  _min_type min;

   typedef float _data_type;
  _data_type data;


    static const float MAX_INIT;
     static const float MIN_INIT;
 

  typedef boost::shared_ptr< ::ric_board::calibField_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ric_board::calibField_<ContainerAllocator> const> ConstPtr;

}; // struct calibField_

typedef ::ric_board::calibField_<std::allocator<void> > calibField;

typedef boost::shared_ptr< ::ric_board::calibField > calibFieldPtr;
typedef boost::shared_ptr< ::ric_board::calibField const> calibFieldConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const float
      calibField_<ContainerAllocator>::MAX_INIT =
        
          -100000.0
        
        ;
   

   
   template<typename ContainerAllocator> const float
      calibField_<ContainerAllocator>::MIN_INIT =
        
          100000.0
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ric_board::calibField_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ric_board::calibField_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ric_board

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'ric_board': ['/home/cc/ee106a/fa17/class/ee106a-aax/ros_workspaces/project/src/ric/ric_board/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ric_board::calibField_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ric_board::calibField_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ric_board::calibField_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ric_board::calibField_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ric_board::calibField_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ric_board::calibField_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ric_board::calibField_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5177a845b9542a012d392eed767ceec6";
  }

  static const char* value(const ::ric_board::calibField_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5177a845b9542a01ULL;
  static const uint64_t static_value2 = 0x2d392eed767ceec6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ric_board::calibField_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ric_board/calibField";
  }

  static const char* value(const ::ric_board::calibField_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ric_board::calibField_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 max\n\
float32 min\n\
\n\
float32 data\n\
\n\
float32 MAX_INIT = -100000.0\n\
float32 MIN_INIT = 100000.0\n\
";
  }

  static const char* value(const ::ric_board::calibField_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ric_board::calibField_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.max);
      stream.next(m.min);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct calibField_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ric_board::calibField_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ric_board::calibField_<ContainerAllocator>& v)
  {
    s << indent << "max: ";
    Printer<float>::stream(s, indent + "  ", v.max);
    s << indent << "min: ";
    Printer<float>::stream(s, indent + "  ", v.min);
    s << indent << "data: ";
    Printer<float>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIC_BOARD_MESSAGE_CALIBFIELD_H
