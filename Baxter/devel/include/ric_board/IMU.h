// Generated by gencpp from file ric_board/IMU.msg
// DO NOT EDIT!


#ifndef RIC_BOARD_MESSAGE_IMU_H
#define RIC_BOARD_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Quaternion.h>

namespace ric_board
{
template <class ContainerAllocator>
struct IMU_
{
  typedef IMU_<ContainerAllocator> Type;

  IMU_()
    : orientation()
    , linear_acceleration()
    , angular_velocity()
    , magnetometer()
    , temperature(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , roll(0.0)  {
      linear_acceleration.assign(0.0);

      angular_velocity.assign(0.0);

      magnetometer.assign(0.0);
  }
  IMU_(const ContainerAllocator& _alloc)
    : orientation(_alloc)
    , linear_acceleration()
    , angular_velocity()
    , magnetometer()
    , temperature(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , roll(0.0)  {
  (void)_alloc;
      linear_acceleration.assign(0.0);

      angular_velocity.assign(0.0);

      magnetometer.assign(0.0);
  }



   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef boost::array<float, 3>  _linear_acceleration_type;
  _linear_acceleration_type linear_acceleration;

   typedef boost::array<float, 3>  _angular_velocity_type;
  _angular_velocity_type angular_velocity;

   typedef boost::array<float, 3>  _magnetometer_type;
  _magnetometer_type magnetometer;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _roll_type;
  _roll_type roll;




  typedef boost::shared_ptr< ::ric_board::IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ric_board::IMU_<ContainerAllocator> const> ConstPtr;

}; // struct IMU_

typedef ::ric_board::IMU_<std::allocator<void> > IMU;

typedef boost::shared_ptr< ::ric_board::IMU > IMUPtr;
typedef boost::shared_ptr< ::ric_board::IMU const> IMUConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ric_board::IMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ric_board::IMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ric_board

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'ric_board': ['/home/cc/ee106a/fa17/class/ee106a-aax/ros_workspaces/project/src/ric/ric_board/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ric_board::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ric_board::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ric_board::IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ric_board::IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ric_board::IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ric_board::IMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ric_board::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e8a98900b806343478f736605d2b07cf";
  }

  static const char* value(const ::ric_board::IMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe8a98900b8063434ULL;
  static const uint64_t static_value2 = 0x78f736605d2b07cfULL;
};

template<class ContainerAllocator>
struct DataType< ::ric_board::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ric_board/IMU";
  }

  static const char* value(const ::ric_board::IMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ric_board::IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Quaternion orientation\n\
float32[3] linear_acceleration\n\
float32[3] angular_velocity\n\
float32[3] magnetometer\n\
float32 temperature\n\
float32 pitch\n\
float32 yaw\n\
float32 roll\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::ric_board::IMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ric_board::IMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.orientation);
      stream.next(m.linear_acceleration);
      stream.next(m.angular_velocity);
      stream.next(m.magnetometer);
      stream.next(m.temperature);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ric_board::IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ric_board::IMU_<ContainerAllocator>& v)
  {
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "linear_acceleration[]" << std::endl;
    for (size_t i = 0; i < v.linear_acceleration.size(); ++i)
    {
      s << indent << "  linear_acceleration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.linear_acceleration[i]);
    }
    s << indent << "angular_velocity[]" << std::endl;
    for (size_t i = 0; i < v.angular_velocity.size(); ++i)
    {
      s << indent << "  angular_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.angular_velocity[i]);
    }
    s << indent << "magnetometer[]" << std::endl;
    for (size_t i = 0; i < v.magnetometer.size(); ++i)
    {
      s << indent << "  magnetometer[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.magnetometer[i]);
    }
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIC_BOARD_MESSAGE_IMU_H
