// Generated by gencpp from file ric_robot/home_elevatorRequest.msg
// DO NOT EDIT!


#ifndef RIC_ROBOT_MESSAGE_HOME_ELEVATORREQUEST_H
#define RIC_ROBOT_MESSAGE_HOME_ELEVATORREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ric_robot
{
template <class ContainerAllocator>
struct home_elevatorRequest_
{
  typedef home_elevatorRequest_<ContainerAllocator> Type;

  home_elevatorRequest_()
    : dir(0)  {
    }
  home_elevatorRequest_(const ContainerAllocator& _alloc)
    : dir(0)  {
  (void)_alloc;
    }



   typedef int8_t _dir_type;
  _dir_type dir;




  typedef boost::shared_ptr< ::ric_robot::home_elevatorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ric_robot::home_elevatorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct home_elevatorRequest_

typedef ::ric_robot::home_elevatorRequest_<std::allocator<void> > home_elevatorRequest;

typedef boost::shared_ptr< ::ric_robot::home_elevatorRequest > home_elevatorRequestPtr;
typedef boost::shared_ptr< ::ric_robot::home_elevatorRequest const> home_elevatorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ric_robot::home_elevatorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ric_robot::home_elevatorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ric_robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'ric_robot': ['/home/cc/ee106a/fa17/class/ee106a-aax/ros_workspaces/project/src/ric/ric_robot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ric_robot::home_elevatorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ric_robot::home_elevatorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ric_robot::home_elevatorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ric_robot::home_elevatorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ric_robot::home_elevatorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ric_robot::home_elevatorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ric_robot::home_elevatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1cf84cfbab276e0cb1fa7c3b384eb912";
  }

  static const char* value(const ::ric_robot::home_elevatorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1cf84cfbab276e0cULL;
  static const uint64_t static_value2 = 0xb1fa7c3b384eb912ULL;
};

template<class ContainerAllocator>
struct DataType< ::ric_robot::home_elevatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ric_robot/home_elevatorRequest";
  }

  static const char* value(const ::ric_robot::home_elevatorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ric_robot::home_elevatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 dir\n\
";
  }

  static const char* value(const ::ric_robot::home_elevatorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ric_robot::home_elevatorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dir);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct home_elevatorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ric_robot::home_elevatorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ric_robot::home_elevatorRequest_<ContainerAllocator>& v)
  {
    s << indent << "dir: ";
    Printer<int8_t>::stream(s, indent + "  ", v.dir);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RIC_ROBOT_MESSAGE_HOME_ELEVATORREQUEST_H
