# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ric_board/imuCalib.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ric_board.msg

class imuCalib(genpy.Message):
  _md5sum = "d267917841bb0bbefd54e631b648cc9b"
  _type = "ric_board/imuCalib"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """calibField x
calibField y
calibField z

================================================================================
MSG: ric_board/calibField
float32 max
float32 min

float32 data

float32 MAX_INIT = -100000.0
float32 MIN_INIT = 100000.0
"""
  __slots__ = ['x','y','z']
  _slot_types = ['ric_board/calibField','ric_board/calibField','ric_board/calibField']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(imuCalib, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = ric_board.msg.calibField()
      if self.y is None:
        self.y = ric_board.msg.calibField()
      if self.z is None:
        self.z = ric_board.msg.calibField()
    else:
      self.x = ric_board.msg.calibField()
      self.y = ric_board.msg.calibField()
      self.z = ric_board.msg.calibField()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.x.max, _x.x.min, _x.x.data, _x.y.max, _x.y.min, _x.y.data, _x.z.max, _x.z.min, _x.z.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.x is None:
        self.x = ric_board.msg.calibField()
      if self.y is None:
        self.y = ric_board.msg.calibField()
      if self.z is None:
        self.z = ric_board.msg.calibField()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.x.max, _x.x.min, _x.x.data, _x.y.max, _x.y.min, _x.y.data, _x.z.max, _x.z.min, _x.z.data,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.x.max, _x.x.min, _x.x.data, _x.y.max, _x.y.min, _x.y.data, _x.z.max, _x.z.min, _x.z.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.x is None:
        self.x = ric_board.msg.calibField()
      if self.y is None:
        self.y = ric_board.msg.calibField()
      if self.z is None:
        self.z = ric_board.msg.calibField()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.x.max, _x.x.min, _x.x.data, _x.y.max, _x.y.min, _x.y.data, _x.z.max, _x.z.min, _x.z.data,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9f = struct.Struct("<9f")
