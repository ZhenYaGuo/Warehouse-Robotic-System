# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ric_robot/ric_raw.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ric_raw(genpy.Message):
  _md5sum = "717e58ef32c83e8c93ceae03d4826367"
  _type = "ric_robot/ric_raw"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32[4] orientation #qx,qy,qz,qw
int16[3] linear_acceleration #ax,ay,az
int16[3] angular_velocity #gx,gy,gz
int16[3] magnetometer #mx,my,mz
int32[2] encoders #left_ticks,right_ticks
float32[3] urf #left_urf, rear_urf, right_urf


"""
  __slots__ = ['orientation','linear_acceleration','angular_velocity','magnetometer','encoders','urf']
  _slot_types = ['float32[4]','int16[3]','int16[3]','int16[3]','int32[2]','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       orientation,linear_acceleration,angular_velocity,magnetometer,encoders,urf

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ric_raw, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.orientation is None:
        self.orientation = [0.,0.,0.,0.]
      if self.linear_acceleration is None:
        self.linear_acceleration = [0,0,0]
      if self.angular_velocity is None:
        self.angular_velocity = [0,0,0]
      if self.magnetometer is None:
        self.magnetometer = [0,0,0]
      if self.encoders is None:
        self.encoders = [0,0]
      if self.urf is None:
        self.urf = [0.,0.,0.]
    else:
      self.orientation = [0.,0.,0.,0.]
      self.linear_acceleration = [0,0,0]
      self.angular_velocity = [0,0,0]
      self.magnetometer = [0,0,0]
      self.encoders = [0,0]
      self.urf = [0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_4f.pack(*self.orientation))
      buff.write(_struct_3h.pack(*self.linear_acceleration))
      buff.write(_struct_3h.pack(*self.angular_velocity))
      buff.write(_struct_3h.pack(*self.magnetometer))
      buff.write(_struct_2i.pack(*self.encoders))
      buff.write(_struct_3f.pack(*self.urf))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 16
      self.orientation = _struct_4f.unpack(str[start:end])
      start = end
      end += 6
      self.linear_acceleration = _struct_3h.unpack(str[start:end])
      start = end
      end += 6
      self.angular_velocity = _struct_3h.unpack(str[start:end])
      start = end
      end += 6
      self.magnetometer = _struct_3h.unpack(str[start:end])
      start = end
      end += 8
      self.encoders = _struct_2i.unpack(str[start:end])
      start = end
      end += 12
      self.urf = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.orientation.tostring())
      buff.write(self.linear_acceleration.tostring())
      buff.write(self.angular_velocity.tostring())
      buff.write(self.magnetometer.tostring())
      buff.write(self.encoders.tostring())
      buff.write(self.urf.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 16
      self.orientation = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 6
      self.linear_acceleration = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.angular_velocity = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 6
      self.magnetometer = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=3)
      start = end
      end += 8
      self.encoders = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=2)
      start = end
      end += 12
      self.urf = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f = struct.Struct("<4f")
_struct_3h = struct.Struct("<3h")
_struct_2i = struct.Struct("<2i")
_struct_3f = struct.Struct("<3f")
